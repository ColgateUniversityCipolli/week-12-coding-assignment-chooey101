install.packages("vgam")
install.packages("VGAM")
library(tidyverse)
library(VGAM)
n.sim = 10000
alpha = 0.05
t20.crit <- qt(1-alpha, df = 20 - 1)   # df = 19
t30.crit <- qt(1-alpha, df = 30 - 1)   # df = 29
n.sim = 10000
sim.tbl <- tibble(
early_reject = logical(n_sim),
overall      = logical(n_sim)
)
sim.tbl <- tibble(
early_reject = logical(n.sim),
overall      = logical(n.sim)
)
for (i in n.sim) {
x <- rlaplace(30, location = 0, scale = 4)
# interim look
t20 <- mean(x[1:20]) / (sd(x[1:20]) / sqrt(20))
sim_tbl$early_reject[i] <- (t20 > tcrit20)
if (sim_tbl$early_reject[i]) {
# if rejected early, overall is also TRUE
sim_tbl$overall[i] <- TRUE
} else {
# final look
t30 <- mean(x) / (sd(x) / sqrt(30))
sim_tbl$overall[i] <- (t30 > tcrit30)
}
}
for (i in n.sim) {
x <- rlaplace(30, location = 0, scale = 4)
# interim look
t20 <- mean(x[1:20]) / (sd(x[1:20]) / sqrt(20))
sim_tbl$early_reject[i] <- (t20 > t20.crit)
if (sim_tbl$early_reject[i]) {
# if rejected early, overall is also TRUE
sim_tbl$overall[i] <- TRUE
} else {
# final look
t30 <- mean(x) / (sd(x) / sqrt(30))
sim_tbl$overall[i] <- (t30 > t30.crit)
}
}
for (i in n.sim) {
x <- rlaplace(30, location = 0, scale = 4)
# interim look
t20 <- mean(x[1:20]) / (sd(x[1:20]) / sqrt(20))
sim.tbl$early_reject[i] <- (t20 > t20.crit)
if (sim.tbl$early_reject[i]) {
# if rejected early, overall is also TRUE
sim_tbl$overall[i] <- TRUE
} else {
# final look
t30 <- mean(x) / (sd(x) / sqrt(30))
sim.tbl$overall[i] <- (t30 > t30.crit)
}
}
sim.tbl <- sim.tbl|>
mutate(late_reject = !early_reject & overall)|>
summarize(
early_rate   = mean(early_reject),
late_rate    = mean(late_reject),
overall_rate = mean(overall)
)
sim.tbl <- tibble(
early_reject = logical(n.sim),
overall      = logical(n.sim)
)
for (i in n.sim) {
x <- rlaplace(30, location = 0, scale = 4)
# interim look
t20 <- mean(x[1:20]) / (sd(x[1:20]) / sqrt(20))
sim.tbl$early_reject[i] <- (t20 > t20.crit)
if (sim.tbl$early_reject[i]) {
# if rejected early, overall is also TRUE
sim_tbl$overall[i] <- TRUE
} else {
# final look
t30 <- mean(x) / (sd(x) / sqrt(30))
sim.tbl$overall[i] <- (t30 > t30.crit)
}
}
sim.tbl <- sim.tbl |>
mutate(late_reject = !early_reject & overall)
sim.stats.tibble <- sim.tbl |>
summarize(
early_rate   = mean(early_reject),
late_rate    = mean(late_reject),
overall_rate = mean(overall)
)
sim.stats.tibble <- sim.tbl |>
mutate(late_reject <- as.numeric(late_reject),
early_reject <- as.numeric(early_reject),
overall <- as.numeric(overall))
View(sim.tbl)
for (i in n.sim) {
x <- rlaplace(30, location = 0, scale = 4)
# interim look
t20 <- mean(x[1:20]) / (sd(x[1:20]) / sqrt(20))
sim.tbl$early_reject[i] <- (t20 > t20.crit)
if (sim.tbl$early_reject[i]) {
# if rejected early, overall is also TRUE
sim.tbl$overall[i] <- TRUE
} else {
# final look
t30 <- mean(x) / (sd(x) / sqrt(30))
sim.tbl$overall[i] <- (t30 > t30.crit)
}
}
View(sim.stats.tibble)
View(sim.tbl)
library(tidyverse)
library(VGAM)
alpha = 0.05
t20.crit <- qt(1-alpha, df = 20 - 1)   # df = 19
t30.crit <- qt(1-alpha, df = 30 - 1)   # df = 29
sim.tbl <- tibble(
early_reject = logical(n.sim),
overall      = logical(n.sim)
)
n.sim = 10000
#1c
sim.tbl <- tibble(
early_reject = logical(n.sim),
overall      = logical(n.sim)
)
for (i in n.sim) {
x <- rlaplace(30, location = 0, scale = 4)
# interim look
t20 <- mean(x[1:20]) / (sd(x[1:20]) / sqrt(20))
sim.tbl$early_reject[i] <- (t20 > t20.crit)
if (sim.tbl$early_reject[i]) {
# if rejected early, overall is also TRUE
sim.tbl$overall[i] <- TRUE
} else {
# final look
t30 <- mean(x) / (sd(x) / sqrt(30))
sim.tbl$overall[i] <- (t30 > t30.crit)
}
}
View(sim.tbl)
for (i in 1:n.sim) {
x <- rlaplace(30, location = 0, scale = 4)
# interim look
t20 <- mean(x[1:20]) / (sd(x[1:20]) / sqrt(20))
sim.tbl$early_reject[i] <- (t20 > t20.crit)
if (sim.tbl$early_reject[i]) {
# if rejected early, overall is also TRUE
sim.tbl$overall[i] <- TRUE
} else {
# final look
t30 <- mean(x) / (sd(x) / sqrt(30))
sim.tbl$overall[i] <- (t30 > t30.crit)
}
}
sim.tbl.rates <- sim.tbl |>
mutate(late_reject = !early_reject & overall)|>
summarize(
early_rate   = mean(early_reject),
late_rate    = mean(late_reject),
overall_rate = mean(overall)
)
View(sim.tbl.rates)
View(sim.tbl)
n_sim      <- 10000
n          <- 15
df         <- n - 1
tcrit_left <- qt(alpha, df=df)
tcrit_right <- qt(1 - alpha, df = df)
# two‐sided critical value
tcrit_2s   <- qt(1 - alpha/2, df = df)
params <- list(
Beta_10_2  = list(a=10, b=2,  mu=10/12),
Beta_2_10  = list(a=2,  b=10, mu=2/12),
Beta_10_10 = list(a=10, b=10,mu=0.5)
)
type1_rates_left <- sapply(params, function(p) {
rejections <- replicate(n_sim, {
x     <- rbeta(n, p$a, p$b)
tstat <- (mean(x) - p$mu) / (sd(x) / sqrt(n))
tstat < tcrit
})
mean(rejections)
})
type1_rates_left <- sapply(params, function(p) {
rejections <- replicate(n_sim, {
x     <- rbeta(n, p$a, p$b)
tstat <- (mean(x) - p$mu) / (sd(x) / sqrt(n))
tstat < tcrit_left
})
mean(rejections)
})
type1_rates_left
type1_rates_right <- sapply(params, function(p) {
rejections <- replicate(n_sim, {
x     <- rbeta(n, p$a, p$b)
tstat <- (mean(x) - p$mu) / (sd(x) / sqrt(n))
# reject if t-statistic is too large
tstat > tcrit_right
})
mean(rejections)
})
type1_rates_two <- sapply(params, function(p) {
mean(replicate(n_sim, {
x     <- rbeta(n, p$a, p$b)
tstat <- (mean(x) - p$mu) / (sd(x) / sqrt(n))
(tstat < -tcrit_2s) | (tstat > +tcrit_2s)
}))
})
distribution_type <- c("Beta(10,2)", "Beta(2,10)", "Beta(10,10)")
summary_df <- data.frame(
Distribution = distribution_type,
Left_Tailed  = left_rate,
Right_Tailed = right_rate,
Two_Tailed   = two_rate,
check.names  = FALSE
)
summary_df <- data.frame(
Distribution = distribution_type,
Left_Tailed  = type1_rates_left,
Right_Tailed = type1_rates_right,
Two_Tailed   = type1_rates_two,
check.names  = FALSE
)
xt <- xtable(
summary_df,
caption = "Empirical Type I Error Rates by Test Type and Distribution",
label   = "tab:type1"
)
library(xtable)
xt <- xtable(
summary_df,
caption = "Empirical Type I Error Rates by Test Type and Distribution",
label   = "tab:type1"
)
print(
xt,
type             = "latex",
include.rownames = FALSE,
digits           = c(0, 0, 3, 3, 3)  # no decimals for col 1; three for the rates
)
